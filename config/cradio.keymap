// vi: ft=c
// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
// https://github.com/zmkfirmware/zmk/tree/main/app/dts/behaviors
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

// my own code
#include "custom.h"

// Layers name to integer definition
#define DEFAULT 0
#define LNUM 1
#define NUM 2
#define NUM_LOCK 3
#define RNAV 4
#define LNAV 5
#define FN 6
#define GAME 7
#define TERM 8
// macro layers
#define MK 9
#define MF 10
#define MFG 11
#define MT 12
#define MGIT 13
#define LOCK 14

#define EMPTYLAYER \
    &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans \
    &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans \
    &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans \
                            &trans  &trans    &trans  &trans

&sk {
    quick-release;
};
&lt {
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
};
&caps_word {
    continue-list = <UNDERSCORE MINUS SEMICOLON COLON APOSTROPHE DOUBLE_QUOTES>;
};

/ {
    behaviors {
        JJ_MM(unlock, unlock, mods = <(MOD_RSFT)>; bindings = <&none>, <&unlockdance>;)
        JJ(unlockdance, unlock_dance, "zmk,behavior-tap-dance", 0, tapping-term-ms = <200>; bindings = <&none>, <&none>, <&to 0>;)
        JJ_MM(mmsc, mod_morph_semicolon, mods = <(MOD_LSFT)>; bindings = <&kp COLON>, <&kp SEMICOLON>;)
        JJ_MM(mmsa, mod_morph_semicolon_apostrophe, mods = <(MOD_RALT)>; bindings = <&mmsc>, <&kp DOUBLE_QUOTES>;)
        JJ_MM(mmoe, mod_morph_o_enter, mods = <(MOD_RALT)>; bindings = <&kp O>, <&kp ENTER>;)
        JJ_MM(mmgrave, mod_morph_grave, mods = <(MOD_LSFT)>; bindings = <&kp TILDE>, <&kp GRAVE>;)
        JJ_MM(mmqgr, mod_morph_q_grave, mods = <(MOD_RALT)>; bindings = <&kp Q>, <&mmgrave>;)
        JJ_MM(mmat, mod_morph_a_tab, mods = <(MOD_RALT|MOD_RGUI)>; keep-mods = <(MOD_RALT|MOD_RGUI)>; bindings = <&kp A>, <&kp TAB>;)
        JJ_MM(mmcw, mod_morph_caps_word, mods = <(MOD_LSFT)>; bindings = <&kp ESC>, <&caps_word>;)
        JJ_HT_HOLD(caps, caps_word_hold, bindings = <&kp>, <&mmcw>;)
        JJ_HT_HOLD(spc, space_shift, retro-tap; hold-while-undecided; bindings = <&kp>, <&kp>;)
        JJ_HT_HOLD(rm, repeat_mod, bindings = <&kp>, <&key_repeat>;)
        JJ_HT_HOLD(rl, repeat_layer, hold-while-undecided; bindings = <&mo>, <&key_repeat>;)
        JJ_HT_HOLD(mto, mod_tap_to_layer, bindings = <&sk>, <&to>;)
        JJ_HT_HOLD(mtog, mod_tap_toggle_layer, bindings = <&sk>, <&tog>;)
        JJ_HT_HOLD(lt2, layer_tap_2, bindings = <&mo>, <&to>;)
        JJ_MM(mmzd, mod_morph_z_delete, mods = <(MOD_RALT)>; bindings = <&kp Z>, <&kp DEL>;)
        JJ_HT_TAP(ltz, layer_tap_z, bindings = <&mo>, <&mmzd>;)
        JJ_HT_TAP(hm, homerow_mods, bindings = <&kp>, <&kp>;)
        JJ_TD(numdot, num_layer_dot, <&kp DOT>, <&none>, <&kp LC(LA(DEL))>, <&tog GAME>)
        JJ_MM(mmctrlspc, mod_morph_ctrl_space, mods = <(MOD_LSFT)>; bindings = <&kp SPACE>, <&kp LCTRL>;)
    };
    combos {
        compatible = "zmk,combos";
        game_ctrl {
            timeout-ms = <50>;
            key-positions = <10 31>; // left outer thumb + A (default) or G (gaming)
            bindings = <&kp LCTRL>;
            layers = <GAME>;
        };
        game_d {
            timeout-ms = <50>;
            key-positions = <14 31>; // left outer thumb + D (default) or T (gaming)
            bindings = <&kp D>;
            layers = <GAME>;
        };
	combo_enter { // safety net to prevent activating backspace before hold-tap registers hold
            timeout-ms = <50>;
            key-positions = <19 32>; // right outer thumb + O key
            bindings = <&kp ENTER>;
	};
    };
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            //│  Q       │  W       │  F       │  P       │  G       │   │  J       │  L       │  U       │  Y       │ :;"'     │
                &mmqgr     &kp W      &kp F      &kp P      &kp G          &kp J      &kp L      &kp U      &kp Y      &mmsa
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  A       │  R       │  S       │  T       │  D       │   │  H       │  N       │  E       │  I       │  O       │
                &mmat      &kp R      &kp S      &kp T     &lt TERM D      &kp H      &kp N      &kp E      &kp I      &mmoe
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  Z       │  X       │  C       │  V       │  B       │   │  K       │  M       │  ,<      │  .>      │  /?      │
               &ltz FN Z &hm LCTRL X &hm RALT C &hm RGUI V &lt LNAV B     &kp K &hm LGUI M &hm LALT COMMA &hm LCTRL DOT &kp FSLH
            //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                          &caps LCTRL ESC &spc LSHFT SPACE &hm RALT BSPC &rl NUM R
            //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            // esc gets thumb cuz vim & as safe key to verify layer 0
	    // mmsa = tap for colon, shift for semicolon, RALT for double quotes, NUM layer for single quotes
            >;
        };
        num_layer {
            bindings = < // TODO: decide whether to split this or not
            //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            //│ `~       │  1       │  2       │  3       │  \|      │   │ [{       │ ]}       │ -_       │ =+       │ '"       │
                &mmgrave   &kp N1     &kp N2     &kp N3     &kp BSLH       &kp LBKT   &kp RBKT   &kp MINUS  &kp EQUAL  &kp APOS
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│ TAB      │  4       │  5       │  6       │  .       │   │ TAB      │ LEFT     │ DOWN     │ UP       │ RIGHT    │
                &kp TAB    &kp N4     &kp N5     &kp N6     &numdot        &kp TAB    &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│ DELETE   │  7       │  8       │  9       │  0       │   │ PSCRN    │ HOME     │ PG_UP    │ PG_DN    │ END      │
                &kp DEL    &kp N7     &kp N8     &kp N9     &kp N0         &kp PSCRN  &kp HOME   &kp PG_UP &kp PG_DN   &kp END
            //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                    &mtog LCTRL NUM_LOCK &mt LSHFT SPACE &mt RALT ENTER &to FN
            //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
        num_hold_layer { bindings = <EMPTYLAYER>; };
        num_lock_layer { bindings = <EMPTYLAYER>; };
        right_navi_layer {
            bindings = <
            //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            //│ `~       │  1       │  2       │  3       │  \|      │   │ [{       │ ]}       │ -_       │ =+       │ '"       │
                &trans     &trans     &trans     &trans     &trans         &kp LBKT   &kp RBKT   &kp MINUS  &kp EQUAL  &kp APOS
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│ TAB      │  4       │  5       │  6       │  0       │   │ TAB      │ LEFT     │ DOWN     │ UP       │ RIGHT    │
                &trans     &trans     &trans     &trans     &trans         &kp TAB    &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│ DELETE   │  7       │  8       │  9       │  0       │   │ PSCRN    │ HOME     │ PG_UP    │ PG_DN    │ END      │
                &trans     &trans     &trans     &trans     &trans         &kp PSCRN  &kp HOME   &kp PG_UP &kp PG_DN   &kp END
            //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                 &trans     &trans        &mt RALT ENTER &to FN
            //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
        left_navi_layer {
            bindings = <
            //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            //│ `~ESC    │ PREV SONG│PLAY/PAUSE│ NEXT SONG│ PSCRN    │   │          │          │          │          │          │
                &gresc    &kp C_PREV  &kp C_PP  &kp C_NEXT  &kp PSCRN &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp C_BRI_DN &kp C_BRI_UP
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│ LEFT     │ DOWN     │ UP       │ RIGHT    │ Num Layer│   │          │TODO:BTDSC│          │          │          │
                &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &tog LNUM  &out OUT_TOG &bt BT_CLR &bt BT_PRV &bt BT_NXT &ext_power EP_TOG
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│ HOME     │ PG_DN    │ PG_UP    │ END      │          │   │          │          │          │          │          │
                &kp HOME  &kp PG_DN   &kp PG_UP  &kp END    &trans    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
            //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                               &kp LA(TAB)  &kp ENTER       &trans     &to FN
            //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
        fn_layer {
            bindings = <
            //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            //│ F1       │ F2       │ F3       │ F4       │ F5       │   │ F13      │ F14      │ F15      │ F16      │ F17      │
                &kp F1     &kp F2     &kp F3     &kp F4     &kp F5         &kp F13    &kp F14    &kp F15    &kp F16    &kp F17
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│ F6       │ F7       │ F8       │ F9       │ F10      │   │ F18      │ F19      │ F20      │ F21      │ F22      │
                &kp F6     &kp F7     &kp F8     &kp F9     &kp F10        &kp F18    &kp F19    &kp F20    &kp F21    &kp F22
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│ LCTRL    │ LALT     │ LGUI     │ F11      │ F12      │   │ F23      │ F24      │ RGUI     │ RALT     │ RCTRL    │
                &kp LCTRL  &kp LALT   &kp LGUI   &kp F11    &kp F12        &kp F23    &kp F24    &kp RGUI   &kp RALT   &kp RCTRL // TODO: meh key
            //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                 &to 0      &to LOCK       &trans     &trans //&to GAME
            //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
        game_layer {
            bindings = <
            // NOTE: This is suited to my gaming habits.
            // I don't ever bind anything to D (QWERTY's G) so that I don't accidentally fat finger T (QWERTY's F) and throw a grenade.
            // I want the row stagger of the middle 3 rows for WASD as the leftmost 3 rows is awkward, 
            // and I want pinky to be used for things other than sprint, thus the shift of the first 2 rows by 1 column to the right.
            //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            //│  TAB     │  Q       │  W       │  F       │  P       │   │  J       │  L       │  U       │  Y       │ ;:'"     │
                &kp TAB    &mmqgr     &kp W      &kp F      &kp P          &trans     &trans     &trans     &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  G       │  A       │  R       │  S       │  T       │   │  H       │  N       │  E       │  I       │  O       │
                &kp G      &kp A      &kp R      &kp S      &kp T          &trans     &trans     &trans     &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  Z       │  X       │  C       │  V       │  B       │   │  K       │  M       │  ,<      │  .>      │  /?      │
                &kp Z      &kp X      &kp C      &kp V      &trans         &trans     &trans     &trans     &trans     &trans
            //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                 &mmctrlspc &kp LSHFT      &trans     &lt2 NUM 0
            //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            // esc gets thumb cuz vim & as safe key to verify layer 0
            >;
        };
        term_layer {
            bindings = <
            //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            //│  Q       │  W       │  F       │  P       │  G       │   │  J       │  L       │  U       │  Y       │ ;:'"     │
                &trans     &trans     &to MF     &trans     &to MGIT       &tech      &ls        &trans     &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  A       │  R       │  S       │  T       │  D       │   │  H       │  N       │  E       │  I       │  O       │
                &trans     &trans     &trans     &to MT     &trans         &trans     &nvim      &trans     &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  Z       │  X       │  C       │  V       │  B       │   │  K       │  M       │  ,<      │  .>      │  /?      │
                &trans     &trans     &trans     &trans     &trans         &to MK     &trans     &trans     &trans     &trans
            //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                 &to 0      &trans         &trans     &to TERM
            //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
        k_layer {
            bindings = <
            //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            //│  Q       │  W       │  F       │  P       │  B       │   │  J       │  L       │  U       │  Y       │ '"       │
                &trans     &trans     &trans     &trans     &trans         &trans     &trans     &trans     &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  A       │  R       │  S       │  T       │  G       │   │  M       │  N       │  E       │  I       │  O       │
                &trans     &trans     &trans     &trans     &kg            &trans     &trans     &ke        &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  Z       │  X       │  C       │  D       │  V       │   │  K       │  H       │  ,<      │  .>      │  /?      │
                &trans     &kx        &trans     &trans     &trans         &k9s       &trans     &trans     &trans     &trans
            //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                 &to 0      &trans         &trans     &trans
            //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
        f_layer {
            bindings = <
            //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            //│  Q       │  W       │  F       │  P       │  B       │   │  J       │  L       │  U       │  Y       │ '"       │
                &trans     &trans     &trans     &trans     &trans         &trans     &trans     &trans     &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  A       │  R       │  S       │  T       │  G       │   │  M       │  N       │  E       │  I       │  O       │
                &trans     &trans     &trans     &trans     &to MFG        &trans     &trans     &trans     &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  Z       │  X       │  C       │  D       │  V       │   │  K       │  H       │  ,<      │  .>      │  /?      │
                &trans     &trans     &trans     &trans     &trans         &trans     &trans     &trans     &trans     &trans
            //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                 &to 0      &trans         &trans     &trans
            //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
        fg_layer {
            bindings = <
            //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            //│  Q       │  W       │  F       │  P       │  B       │   │  J       │  L       │  U       │  Y       │ '"       │
                &trans     &trans     &trans     &trans     &trans         &trans     &trans     &trans     &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  A       │  R       │  S       │  T       │  G       │   │  M       │  N       │  E       │  I       │  O       │
                &trans     &fgr       &trans     &trans     &trans         &trans     &trans     &trans     &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  Z       │  X       │  C       │  D       │  V       │   │  K       │  H       │  ,<      │  .>      │  /?      │
                &trans     &trans     &trans     &trans     &trans         &fgk       &trans     &trans     &trans     &trans
            //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                 &to 0      &trans         &trans     &trans
            //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
        t_layer {
            bindings = <
            //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            //│  Q       │  W       │  F       │  P       │  B       │   │  J       │  L       │  U       │  Y       │ '"       │
                &trans     &trans     &trans     &trans     &trans         &trans     &talos     &trans     &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  A       │  R       │  S       │  T       │  G       │   │  M       │  N       │  E       │  I       │  O       │
                &trans     &trans     &trans     &task      &trans         &trans     &trans     &trans     &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  Z       │  X       │  C       │  D       │  V       │   │  K       │  H       │  ,<      │  .>      │  /?      │
                &trans     &trans     &trans     &trans     &trans         &trans     &trans     &trans     &trans     &trans
            //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                 &to 0      &trans         &trans     &trans
            //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
        git_layer {
            bindings = <
            //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            //│  Q       │  W       │  F       │  P       │  G       │   │  J       │  L       │  U       │  Y       │ ;:'"     │
                &trans     &trans     &trans     &trans     &trans         &trans     &gitpl     &trans     &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  A       │  R       │  S       │  T       │  D       │   │  H       │  N       │  E       │  I       │  O       │
                &gita      &trans     &gitps     &trans     &trans         &trans     &trans     &trans     &trans     &trans
            //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            //│  Z       │  X       │  C       │  V       │  B       │   │  K       │  M       │  ,<      │  .>      │  /?      │
                &trans     &trans     &gitc      &trans     &trans         &trans     &trans     &trans     &trans     &trans
            //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                 &to 0      &trans         &trans     &trans
            //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
        lock_layer {
            bindings = <
                &none &none &none &none &none  &none &none &none &none &none
                &none &none &none &none &none  &none &none &none &none &none
                &none &none &none &none &none  &none &none &none &none &none
                                &unlock &none  &none &kp RSHFT
            >;
        };
	// TODO: mouse layer
    };
    macros {
        ZMK_MACRO(nvim, bindings = <&kp N &kp V &kp I &kp M &kp SPACE &to 0>;)
        ZMK_MACRO(ls, bindings = <&kp L &kp S &kp SPACE &kp KP_MINUS>, <&macro_press &kp LSHFT>, <&kp A>, <&macro_release &kp LSHFT>, <&kp L &kp H &kp SPACE &to 0>;)
        ZMK_MACRO(task, bindings = <&kp T &kp A &kp S &kp K &kp SPACE &to 0>;)
        ZMK_MACRO(talos, bindings = <&kp T &kp A &kp L &kp O &kp S &kp C &kp T &kp L &kp SPACE &to 0>;) // talosctl
        ZMK_MACRO(tech, bindings = <&kp J &kp J &kp G &kp A &kp D &kp G &kp E &kp T &kp S &kp DOT &kp T &kp E &kp C &kp H &to 0>;) // jjgadgets.tech
        ZMK_MACRO(gita, bindings = <&kp G &kp I &kp T &kp SPACE &kp A &kp D &kp D &kp SPACE &to 0>;) // git add
        ZMK_MACRO(gitc, bindings = <&kp G &kp I &kp T &kp SPACE &kp C &kp O &kp M &kp M &kp I &kp T &kp SPACE &kp KP_MINUS &kp KP_MINUS &kp G &kp P &kp G &kp KP_MINUS &kp S &kp I &kp G &kp N &kp SPACE &kp KP_MINUS &kp M &kp SPACE &kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT &kp SPACE &to 0>;) // git add
        ZMK_MACRO(gitps, bindings = <&kp G &kp I &kp T &kp SPACE &kp P &kp U &kp S &kp H &to 0>;)
        ZMK_MACRO(gitpl, bindings = <&kp G &kp I &kp T &kp SPACE &kp P &kp U &kp L &kp L &to 0>;)
        ZMK_MACRO(fgr, bindings = <&kp F &kp L &kp U &kp X &kp SPACE &kp G &kp E &kp T &kp SPACE &kp H &kp R &kp SPACE &kp KP_MINUS &kp N &kp SPACE &to 0>;) // flux get hr
        ZMK_MACRO(fgk, bindings = <&kp F &kp L &kp U &kp X &kp SPACE &kp G &kp E &kp T &kp SPACE &kp K &kp S &kp SPACE &to 0>;) // flux get ks
        ZMK_MACRO(k9s, bindings = <&kp K &kp N9 &kp S &kp ENTER &to 0>;)
        ZMK_MACRO(kg, bindings = <&kp K &kp U &kp B &kp E &kp C &kp T &kp L &kp SPACE &kp G &kp E &kp T &kp SPACE &kp KP_MINUS &kp N &kp SPACE &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp SPACE &to 0>;) // kubectl get -n
        ZMK_MACRO(ke, bindings = <&kp K &kp U &kp B &kp E &kp C &kp T &kp L &kp SPACE &kp E &kp D &kp I &kp T &kp SPACE &kp KP_MINUS &kp N &kp SPACE &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp SPACE &to 0>;) // kubectl edit -n
        ZMK_MACRO(kx, bindings = <&kp K &kp U &kp B &kp E &kp C &kp T &kp L &kp SPACE &kp E &kp X &kp E &kp C &kp SPACE &kp KP_MINUS &kp I &kp T &kp SPACE &kp KP_MINUS &kp N &kp SPACE &kp KP_MINUS &kp KP_MINUS &kp SPACE &kp B &kp A &kp S &kp H &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp SPACE &to 0>;) // kubectl exec -it -n
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";
        // layer lock
        num_hold_left {
            if-layers = <NUM>;
            then-layer = <LNUM>;
        };
        //num_hold_right {
        //    if-layers = <NUM>;
        //    then-layer = <RNAV>;
        //};
        num_lock {
            if-layers = <NUM_LOCK>;
            then-layer = <LNUM>;
        };
    };
};

&kscan0 {
    // eager debouncing
    debounce-press-ms = <0>;
    debounce-release-ms = <6>;
    // increasing scan period, *might* reduce power use...?
    // TODO: set press to 0 and scan to 3, verify power
    debounce-scan-period-ms = <3>;
};
